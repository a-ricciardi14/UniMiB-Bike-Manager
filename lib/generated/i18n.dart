import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get arrival => "Arrival";
  String get bikeCode => "Bike code";
  String get bike_empty => "Bike id field is empty";
  String get rack_empty => "Rack id field is empty";
  String get bike_not_avaiable => "Bike unavaiable";
  String get cancel => "Cancel";
  String get confirm => "Confirm";
  String get departure => "Departure";
  String get desc_empty => "Desription field is empty";
  String get description => "Description";
  String get emailEmpty => "Email field is empty";
  String get go => "GO";
  String get hello => "Hello!";
  String get id_empty => "You have not entered any id";
  String get login => "Login";
  String get logout => "Logout";
  String get ops_wrong => "Ops! Something went wrong";
  String get passwordEmpty => "Password field is empty";
  String get rack_code => "Rack code";
  String get bike_code => "Bike code";
  String get rack_not_avaiable => "The rack is full";
  String get racks => "Racks";
  String get remember_me => "Remember me";
  String get rent => "Rent";
  String get rent_confirm => "Confirm rent";
  String get rent_end => "End rent";
  String get rent_end_failed => "Impossible to terminare the rent";
  String get rent_gen => "Rent";
  String get rentals => "Rentals";
  String get rep_failed => "We failed to send your report";
  String get rep_received => "We received your report";
  String get bike_report => "Report";
  String get rack_report => "Report";
  String get request_failed => "We are unable to satisfy your request";
  String get send => "Send";
  String get service_exception => "We are having troubles contacting the service";
  String get settings => "Settings";
  String get success => "Success!";
  String get wrong => "Something went wrong";
  String get add_bike => "Add Bike";
  String get next => "Next";
  String get bike_received => "Bike Recived";
  String get putBike_failed => "Put Bike Failded";
  String get remove_bike => "Remove Bike";
  String get remove_failed => "Remove Failed";
  String get remove_rack => "Remove Rack";
  String get rack_removed => "Rack Removed";
  String get bike_added => "Bike Added";
  String get unlock_code => "Unlock Code";
  String get pass_wrong => "Unlock Code Wrong";
  String get add_rack => "Add Rack";
  String get rack_capacity => "Rack Capacity";
  String get rack_locatDesc => "Rack Location Description";

}

class $it_IT extends S {
  const $it_IT();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get cancel => "Annulla";
  @override
  String get rack_empty => "Campo vuoto";
  @override
  String get rack_code => "Codice rastrelliera";
  @override
  String get bike_code => "Codice bicicletta";
  @override
  String get service_exception => "Stiamo riscontrando dei problemi a contattare il servizio";
  @override
  String get arrival => "Arrivo";
  @override
  String get bike_not_avaiable => "Bicicletta non disponibile";
  @override
  String get request_failed => "Non siamo riusciti a soddisfare la richiesta";
  @override
  String get racks => "Rastrelliere";
  @override
  String get bikeCode => "Codice bicicletta";
  @override
  String get description => "Descrizione";
  @override
  String get rent_end => "Termina noleggio";
  @override
  String get passwordEmpty => "Campo password vuoto";
  @override
  String get rent => "Noleggia";
  @override
  String get login => "Accedi";
  @override
  String get rep_failed => "Non siamo riusciti ad inviare il tuo report";
  @override
  String get logout => "Logout";
  @override
  String get rent_gen => "Noleggio";
  @override
  String get rent_end_failed => "Impossibile terminare il noleggio";
  @override
  String get remember_me => "Ricordami";
  @override
  String get ops_wrong => "Ops! Qualcosa è andato storto";
  @override
  String get rent_confirm => "Conferma noleggio";
  @override
  String get settings => "Impostazioni";
  @override
  String get desc_empty => "Campo descrizione vuoto";
  @override
  String get rack_not_avaiable => "La rastrelliera non ha posti liberi";
  @override
  String get go => "VAI";
  @override
  String get rentals => "Noleggi";
  @override
  String get rep_received => "Abbiamo ricevuto il tuo report";
  @override
  String get bike_empty => "Campo id bicicletta vuoto";
  @override
  String get wrong => "Qualcosa è andato storto";
  @override
  String get confirm => "Conferma";
  @override
  String get success => "Successo!";
  @override
  String get bike_report => "Segnalazioni Biciclette";
  @override
  String get rack_report => "Segnalazioni Rastrelliere";
  @override
  String get emailEmpty => "Campo email vuoto";
  @override
  String get hello => "Ciao!";
  @override
  String get departure => "Partenza";
  @override
  String get send => "Invia";
  @override
  String get add_bike => "Aggiungi Bicicletta";
  @override
  String get next => "Avanti";
  @override
  String get bike_received => "Bicicletta aggiunta con successo";
  @override
  String get putBike_failed => "Impossibile aggiugere biciletta";
  @override
  String get remove_bike => "Rimuovi bicicletta";
  @override
  String get remove_failed => "Rimozione impossibile";
  @override
  String get remove_rack => "Rimuovi rastrelliera";
  @override
  String get rack_removed => "Rastrelliera rimossa";
  @override
  String get bike_added => "Bicicletta aggiunta";
  @override
  String get unlock_code => "Codice di sblocco";
  @override
  String get pass_wrong => "Codice di sblocco sbagliato";
  @override
  String get add_rack => "Aggiungi Rastrelliera";
  @override
  String get rack_capacity => "Capacità Rastrelliera";
  @override
  String get rack_locatDesc => "Descrizione Posizione";
}

class $en extends S {
  const $en();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("it", "IT"),
      Locale("en", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "it_IT":
          return SynchronousFuture<S>(const $it_IT());
        case "en":
          return SynchronousFuture<S>(const $en());
        default:
          // NO-OP.
      }
    }
    return SynchronousFuture<S>(const S());
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
